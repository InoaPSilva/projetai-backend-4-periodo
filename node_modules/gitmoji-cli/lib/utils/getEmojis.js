"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _ora = _interopRequireDefault(require("ora"));

var _emojisCache = _interopRequireDefault(require("./emojisCache"));

var _buildFetchOptions = _interopRequireDefault(require("./buildFetchOptions"));

var _configurationVault = _interopRequireDefault(require("./configurationVault"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getEmojis = async (skipCache = false) => {
  const emojisFromCache = _emojisCache.default.getEmojis();

  if (_emojisCache.default.isAvailable() && !skipCache) return emojisFromCache;
  const spinner = (0, _ora.default)('Fetching gitmojis').start();

  try {
    const response = await (0, _nodeFetch.default)(_configurationVault.default.getGitmojisUrl(), (0, _buildFetchOptions.default)());
    const data = await response.json();
    const emojis = data.gitmojis;

    _emojisCache.default.createEmojis(emojis);

    if (emojis.length === emojisFromCache.length) {
      spinner.info('Gitmojis already up to date');
      return [];
    }

    spinner.succeed('Gitmojis fetched successfully, these are the new emojis:');
    return emojis.filter(emoji => !emojisFromCache.includes(emoji));
  } catch (error) {
    spinner.fail(`Error: ${error}`);
    return [];
  }
};

var _default = getEmojis;
exports.default = _default;