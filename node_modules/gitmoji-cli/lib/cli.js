#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.options = void 0;

var _meow = _interopRequireDefault(require("meow"));

var _updateNotifier = _interopRequireDefault(require("update-notifier"));

var _package = _interopRequireDefault(require("../package.json"));

var _commands = _interopRequireDefault(require("./commands"));

var _flags = _interopRequireDefault(require("./constants/flags"));

var _findGitmojiCommand = _interopRequireDefault(require("./utils/findGitmojiCommand"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _updateNotifier.default)({
  pkg: _package.default
}).notify({
  isGlobal: true
});
const cli = (0, _meow.default)(`
  Usage
    $ gitmoji
  Options
    --${_flags.default.COMMIT}, -c    Interactively commit using the prompts
    --${_flags.default.CONFIG}, -g    Setup gitmoji-cli preferences.
    --${_flags.default.INIT}, -i      Initialize gitmoji as a commit hook
    --${_flags.default.LIST}, -l      List all the available gitmojis
    --${_flags.default.REMOVE}, -r    Remove a previously initialized commit hook
    --${_flags.default.SEARCH}, -s    Search gitmojis
    --${_flags.default.UPDATE}, -u    Sync emoji list with the repo
    --${_flags.default.VERSION}, -v   Print gitmoji-cli installed version
  Examples
    $ gitmoji -l
    $ gitmoji bug linter -s
`, {
  flags: {
    [_flags.default.COMMIT]: {
      type: 'boolean',
      alias: 'c'
    },
    [_flags.default.CONFIG]: {
      type: 'boolean',
      alias: 'g'
    },
    [_flags.default.HELP]: {
      type: 'boolean',
      alias: 'h'
    },
    [_flags.default.INIT]: {
      type: 'boolean',
      alias: 'i'
    },
    [_flags.default.LIST]: {
      type: 'boolean',
      alias: 'l'
    },
    [_flags.default.REMOVE]: {
      type: 'boolean',
      alias: 'r'
    },
    [_flags.default.SEARCH]: {
      type: 'boolean',
      alias: 's'
    },
    [_flags.default.UPDATE]: {
      type: 'boolean',
      alias: 'u'
    },
    [_flags.default.VERSION]: {
      type: 'boolean',
      alias: 'v'
    }
  }
});
const options = {
  [_flags.default.COMMIT]: options => _commands.default.commit(options),
  [_flags.default.CONFIG]: () => _commands.default.config(),
  [_flags.default.HOOK]: options => _commands.default.commit(options),
  [_flags.default.INIT]: () => _commands.default.createHook(),
  [_flags.default.LIST]: () => _commands.default.list(),
  [_flags.default.REMOVE]: () => _commands.default.removeHook(),
  [_flags.default.SEARCH]: () => cli.input.map(input => _commands.default.search(input)),
  [_flags.default.UPDATE]: () => _commands.default.update()
};
exports.options = options;
(0, _findGitmojiCommand.default)(cli, options);